/*
 * Copyright 2025, Redis Ltd. and Contributors
 * All rights reserved.
 *
 * Licensed under the MIT License.
 */

package io.lettuce.core.api.coroutines

import io.lettuce.core.ExperimentalLettuceCoroutinesApi
import io.lettuce.core.search.SearchReply
import io.lettuce.core.search.arguments.AggregateArgs
import io.lettuce.core.search.arguments.CreateArgs
import io.lettuce.core.search.arguments.FieldArgs
import io.lettuce.core.search.arguments.SearchArgs

/**
 * Coroutine executed commands for RediSearch functionality
 *
 * @param <K> Key type.
 * @param <V> Value type.
 * @author Tihomir Mateev
 * @see <a href="https://redis.io/docs/latest/operate/oss_and_stack/stack-with-enterprise/search/">RediSearch</a>
 * @since 6.8
 * @generated by io.lettuce.apigenerator.CreateKotlinCoroutinesApi
 */
@ExperimentalLettuceCoroutinesApi
interface RediSearchCoroutinesCommands<K : Any, V : Any> {

    /**
     * Create a new index with the given name, default creation arguments, and fieldArgs.
     *
     * @param index the index name, as a key
     * @param fieldArgs the [FieldArgs]s of the index
     * @return the result of the create command
     * @since 6.8
     * @see <a href="https://redis.io/docs/latest/commands/ft.create/">FT.CREATE</a>
     * @see CreateArgs
     */
    suspend fun ftCreate(index: K, fieldArgs: List<FieldArgs<K>>): String?

    /**
     * Create a new index with the given name, creation arguments, and fieldArgs.
     *
     * @param index the index name, as a key
     * @param arguments the index [CreateArgs]
     * @param fieldArgs the [FieldArgs]s of the index
     * @return the result of the create command
     * @since 6.8
     * @see <a href="https://redis.io/docs/latest/commands/ft.create/">FT.CREATE</a>
     * @see CreateArgs
     */
    suspend fun ftCreate(index: K, arguments: CreateArgs<K, V>, fieldArgs: List<FieldArgs<K>>): String?

    /**
     * Drop an index, without deleting any documents.
     *
     * @param index the index name, as a key
     * @return the result of the drop command
     * @since 6.8
     * @see <a href="https://redis.io/docs/latest/commands/ft.dropindex/">FT.DROPINDEX</a>
     */
    suspend fun ftDropindex(index: K): String?

    /**
     * Drop an index.
     * <p/>
     * By default, <a href="https://redis.io/docs/latest/commands/ft.dropindex/">FT.DROPINDEX</a> does not delete the documents
     * associated with the index. Adding the <code>deleteDocuments</code> option deletes the documents as well. If an index
     * creation is still running (<a href="https://redis.io/docs/latest/commands/ft.create/">FT.CREATE</a> is running
     * asynchronously), only the document hashes that have already been indexed are deleted. The document hashes left to be
     * indexed remain in the database.
     *
     * @param index the index name, as a key
     * @param deleteDocuments if true, delete the documents as well
     * @return the result of the drop command
     * @since 6.8
     * @see <a href="https://redis.io/docs/latest/commands/ft.dropindex/">FT.DROPINDEX</a>
     */
    suspend fun ftDropindex(index: K, deleteDocuments: Boolean): String?

    /**
     * Search the index with a textual query, returning either documents or just identifiers
     *
     * @param index the index name, as a key
     * @param query the query string
     * @return the result of the search command, see [SearchReply]
     * @since 6.8
     * @see <a href="https://redis.io/docs/latest/commands/ft.search/">FT.SEARCH</a>
     * @see SearchReply
     * @see SearchArgs
     */
    suspend fun ftSearch(index: K, query: V): SearchReply<K, V>?

    /**
     * Search the index with a textual query, returning either documents or just identifiers
     *
     * @param index the index name, as a key
     * @param query the query string
     * @param args the search arguments
     * @return the result of the search command, see [SearchReply]
     * @since 6.8
     * @see <a href="https://redis.io/docs/latest/commands/ft.search/">FT.SEARCH</a>
     * @see SearchReply
     * @see SearchArgs
     */
    suspend fun ftSearch(index: K, query: V, args: SearchArgs<K, V>): SearchReply<K, V>?

    /**
     * Run a search query on an index and perform aggregate transformations on the results
     *
     * @param index the index name, as a key
     * @param query the query string
     * @return the result of the aggregate command, see [SearchReply]
     * @since 6.8
     * @see <a href="https://redis.io/docs/latest/commands/ft.aggregate/">FT.AGGREGATE</a>
     * @see SearchReply
     * @see AggregateArgs
     */
    suspend fun ftAggregate(index: K, query: V): SearchReply<K, V>?

    /**
     * Run a search query on an index and perform aggregate transformations on the results
     *
     * @param index the index name, as a key
     * @param query the query string
     * @param args the aggregate arguments
     * @return the result of the aggregate command, see [SearchReply]
     * @since 6.8
     * @see <a href="https://redis.io/docs/latest/commands/ft.aggregate/">FT.AGGREGATE</a>
     * @see SearchReply
     * @see AggregateArgs
     */
    suspend fun ftAggregate(index: K, query: V, args: AggregateArgs<K, V>): SearchReply<K, V>?

}

