/*
 * Copyright 2025, Redis Ltd. and Contributors
 * All rights reserved.
 *
 * Licensed under the MIT License.
 */
package io.lettuce.core.api.async;

import java.util.List;
import io.lettuce.core.RedisFuture;
import io.lettuce.core.search.SearchReply;
import io.lettuce.core.search.arguments.AggregateArgs;
import io.lettuce.core.search.arguments.CreateArgs;
import io.lettuce.core.search.arguments.FieldArgs;
import io.lettuce.core.search.arguments.SearchArgs;

/**
 * Asynchronous executed commands for RediSearch functionality
 *
 * @param <K> Key type.
 * @param <V> Value type.
 * @author Tihomir Mateev
 * @see <a href="https://redis.io/docs/latest/operate/oss_and_stack/stack-with-enterprise/search/">RediSearch</a>
 * @since 6.8
 * @generated by io.lettuce.apigenerator.CreateAsyncApi
 */
public interface RediSearchAsyncCommands<K, V> {

    /**
     * Create a new index with the given name, default creation arguments, and fieldArgs.
     *
     * @param index the index name, as a key
     * @param fieldArgs the {@link FieldArgs}s of the index
     * @return the result of the create command
     * @since 6.8
     * @see <a href="https://redis.io/docs/latest/commands/ft.create/">FT.CREATE</a>
     * @see CreateArgs
     */
    RedisFuture<String> ftCreate(K index, List<FieldArgs<K>> fieldArgs);

    /**
     * Create a new index with the given name, creation arguments, and fieldArgs.
     *
     * @param index the index name, as a key
     * @param arguments the index {@link CreateArgs}
     * @param fieldArgs the {@link FieldArgs}s of the index
     * @return the result of the create command
     * @since 6.8
     * @see <a href="https://redis.io/docs/latest/commands/ft.create/">FT.CREATE</a>
     * @see CreateArgs
     */
    RedisFuture<String> ftCreate(K index, CreateArgs<K, V> arguments, List<FieldArgs<K>> fieldArgs);

    /**
     * Drop an index, without deleting any documents.
     *
     * @param index the index name, as a key
     * @return the result of the drop command
     * @since 6.8
     * @see <a href="https://redis.io/docs/latest/commands/ft.dropindex/">FT.DROPINDEX</a>
     */
    RedisFuture<String> ftDropindex(K index);

    /**
     * Drop an index.
     * <p/>
     * By default, <a href="https://redis.io/docs/latest/commands/ft.dropindex/">FT.DROPINDEX</a> does not delete the documents
     * associated with the index. Adding the <code>deleteDocuments</code> option deletes the documents as well. If an index
     * creation is still running (<a href="https://redis.io/docs/latest/commands/ft.create/">FT.CREATE</a> is running
     * asynchronously), only the document hashes that have already been indexed are deleted. The document hashes left to be
     * indexed remain in the database.
     *
     * @param index the index name, as a key
     * @param deleteDocuments if true, delete the documents as well
     * @return the result of the drop command
     * @since 6.8
     * @see <a href="https://redis.io/docs/latest/commands/ft.dropindex/">FT.DROPINDEX</a>
     */
    RedisFuture<String> ftDropindex(K index, boolean deleteDocuments);

    /**
     * Search the index with a textual query, returning either documents or just identifiers
     *
     * @param index the index name, as a key
     * @param query the query string
     * @return the result of the search command, see {@link SearchReply}
     * @since 6.8
     * @see <a href="https://redis.io/docs/latest/commands/ft.search/">FT.SEARCH</a>
     * @see SearchReply
     * @see SearchArgs
     */
    RedisFuture<SearchReply<K, V>> ftSearch(K index, V query);

    /**
     * Search the index with a textual query, returning either documents or just identifiers
     *
     * @param index the index name, as a key
     * @param query the query string
     * @param args the search arguments
     * @return the result of the search command, see {@link SearchReply}
     * @since 6.8
     * @see <a href="https://redis.io/docs/latest/commands/ft.search/">FT.SEARCH</a>
     * @see SearchReply
     * @see SearchArgs
     */
    RedisFuture<SearchReply<K, V>> ftSearch(K index, V query, SearchArgs<K, V> args);

    /**
     * Run a search query on an index and perform aggregate transformations on the results
     *
     * @param index the index name, as a key
     * @param query the query string
     * @return the result of the aggregate command, see {@link SearchReply}
     * @since 6.8
     * @see <a href="https://redis.io/docs/latest/commands/ft.aggregate/">FT.AGGREGATE</a>
     * @see SearchReply
     * @see AggregateArgs
     */
    RedisFuture<SearchReply<K, V>> ftAggregate(K index, V query);

    /**
     * Run a search query on an index and perform aggregate transformations on the results
     *
     * @param index the index name, as a key
     * @param query the query string
     * @param args the aggregate arguments
     * @return the result of the aggregate command, see {@link SearchReply}
     * @since 6.8
     * @see <a href="https://redis.io/docs/latest/commands/ft.aggregate/">FT.AGGREGATE</a>
     * @see SearchReply
     * @see AggregateArgs
     */
    RedisFuture<SearchReply<K, V>> ftAggregate(K index, V query, AggregateArgs<K, V> args);

}
